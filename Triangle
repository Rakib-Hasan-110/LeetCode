class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
         int n = triangle.size();
        
        // Bottom-up DP: Start from second last row
        for (int row = n - 2; row >= 0; row--) {
            for (int col = 0; col < triangle[row].size(); col++) {
                // Select the minimum of the two possible paths
                triangle[row][col] += min(triangle[row + 1][col], triangle[row + 1][col + 1]);
            }
        }
        
        // The top element now contains the minimum path sum
        return triangle[0][0];
    }
};
