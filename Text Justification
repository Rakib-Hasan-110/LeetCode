class Solution {
public:
    vector<string> fullJustify(vector<string>& words, int maxWidth) {
         vector<string> result;
    int n = words.size();
    int index = 0;

    while (index < n) {
        int totalChars = words[index].size();
        int last = index + 1;

        while (last < n && totalChars + 1 + words[last].size() <= maxWidth) {
            totalChars += 1 + words[last].size();
            last++;
        }

        string line;
        int numberOfWords = last - index;

        if (last == n || numberOfWords == 1) {
            for (int i = index; i < last; i++) {
                line += words[i];
                if (i < last - 1) line += " ";
            }
            line += string(maxWidth - line.size(), ' '); 
        } else {
            
            int spaces = (maxWidth - totalChars + numberOfWords - 1) / (numberOfWords - 1);
            int extraSpaces = (maxWidth - totalChars + numberOfWords - 1) % (numberOfWords - 1);

            for (int i = index; i < last; i++) {
                line += words[i];
                if (i < last - 1) {
                    line += string(spaces + (extraSpaces > 0 ? 1 : 0), ' ');
                    if (extraSpaces > 0) extraSpaces--;
                }
            }
        }

        result.push_back(line);
        index = last;
    }

    return result;
    }
};
