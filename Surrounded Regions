class Solution {
public:
    void solve(vector<vector<char>>& board) {
         int m = board.size(), n = board[0].size();
        if (m == 0 || n == 0) return;

        queue<pair<int, int>> q;

        // Step 1: Mark border-connected 'O's using BFS
        for (int i = 0; i < m; i++) {
            if (board[i][0] == 'O') { q.push({i, 0}); board[i][0] = '#'; }
            if (board[i][n - 1] == 'O') { q.push({i, n - 1}); board[i][n - 1] = '#'; }
        }
        for (int j = 0; j < n; j++) {
            if (board[0][j] == 'O') { q.push({0, j}); board[0][j] = '#'; }
            if (board[m - 1][j] == 'O') { q.push({m - 1, j}); board[m - 1][j] = '#'; }
        }

        // BFS traversal
        vector<pair<int, int>> directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        while (!q.empty()) {
            auto [x, y] = q.front(); q.pop();
            for (auto [dx, dy] : directions) {
                int nx = x + dx, ny = y + dy;
                if (nx >= 0 && ny >= 0 && nx < m && ny < n && board[nx][ny] == 'O') {
                    board[nx][ny] = '#';
                    q.push({nx, ny});
                }
            }
        }

        // Step 2: Convert all 'O' to 'X' and '#' back to 'O'
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'O') board[i][j] = 'X';
                if (board[i][j] == '#') board[i][j] = 'O';
            }
        }
    }
};
