class Solution {
public:
    vector<string> letterCombinations(string digits) {
         if (digits.empty()) return {}; 
        vector<string> mapping = {
            "",     // 0
            "",     // 1
            "abc",  // 2
            "def",  // 3
            "ghi",  // 4
            "jkl",  // 5
            "mno",  // 6
            "pqrs", // 7
            "tuv",  // 8
            "wxyz"  // 9
        };
        vector<string> result;
        string current;
        backtrack(digits, 0, current, mapping, result);
        return result;
    }
private:
    void backtrack(const string& digits, int index, string& current, const vector<string>& mapping, vector<string>& result) {
        if (index == digits.size()) {
            result.push_back(current);
            return;
        }
        string letters = mapping[digits[index] - '0']; 
        for (char letter : letters) {
            current.push_back(letter); 
            backtrack(digits, index + 1, current, mapping, result); 
            current.pop_back(); 
        }
    }
    
};
