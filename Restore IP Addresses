class Solution {
public:
    vector<string> restoreIpAddresses(string s) {
         vector<string> result;
        vector<string> current;
        backtrack(s, 0, current, result);
        return result;
    }

private:
    void backtrack(string &s, int index, vector<string> &current, vector<string> &result) {
        if (current.size() == 4) {
            if (index == s.size()) {
                result.push_back(current[0] + "." + current[1] + "." + current[2] + "." + current[3]);
            }
            return;
        }

        for (int len = 1; len <= 3 && index + len <= s.size(); len++) {
            string part = s.substr(index, len);
            if (isValid(part)) {
                current.push_back(part);
                backtrack(s, index + len, current, result);
                current.pop_back(); // Backtrack
            }
        }
    }

    bool isValid(string part) {
        if (part.size() > 1 && part[0] == '0') return false; // No leading zeros
        int num = stoi(part);
        return num >= 0 && num <= 255;
    }
};
