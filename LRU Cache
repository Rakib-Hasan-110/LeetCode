class LRUCache {
private:
    int cap;
    list<pair<int, int>> lru; // {key, value}
    unordered_map<int, list<pair<int, int>>::iterator> cache; // key -> node in list

public:
    LRUCache(int capacity) {
        cap = capacity;
    }

    int get(int key) {
        if (cache.find(key) == cache.end())
            return -1;

        // Move the accessed node to front (most recently used)
        lru.splice(lru.begin(), lru, cache[key]);
        return cache[key]->second;
    }

    void put(int key, int value) {
        if (cache.find(key) != cache.end()) {
            // Update the value and move to front
            cache[key]->second = value;
            lru.splice(lru.begin(), lru, cache[key]);
        } else {
            if (lru.size() == cap) {
                // Remove least recently used item
                int delKey = lru.back().first;
                lru.pop_back();
                cache.erase(delKey);
            }
            lru.push_front({key, value});
            cache[key] = lru.begin();
        }
    }
};
