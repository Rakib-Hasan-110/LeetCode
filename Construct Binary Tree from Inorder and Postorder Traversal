/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
     unordered_map<int, int> inorderMap; // To store index of inorder elements
    int postIndex; // Index for postorder traversal

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int n = inorder.size();
        postIndex = n - 1; // Start from the last index in postorder

        // Store inorder indices for quick lookup
        for (int i = 0; i < n; i++) {
            inorderMap[inorder[i]] = i;
        }

        return construct(postorder, 0, n - 1);
    }

    TreeNode* construct(vector<int>& postorder, int left, int right) {
        if (left > right) return NULL;

        int rootVal = postorder[postIndex--]; // Get root from postorder
        TreeNode* root = new TreeNode(rootVal);

        int inIndex = inorderMap[rootVal]; // Find root index in inorder

        // Important: Construct the **right subtree first**, then left
        root->right = construct(postorder, inIndex + 1, right);
        root->left = construct(postorder, left, inIndex - 1);

        return root;
    }
};
